-- 1. University Table
CREATE TABLE university (
    university_id       SERIAL PRIMARY KEY,
    name                VARCHAR(255) NOT NULL,
    location            VARCHAR(255),
    description         TEXT,
    number_of_students  INT,
    pictures            VARCHAR(512)  -- e.g., URLs or file paths
);

-- 2. User Table (super_admin, admin, student)
CREATE TABLE "user" (
    user_id         SERIAL PRIMARY KEY,
    username        VARCHAR(100) NOT NULL,
    email           VARCHAR(255) NOT NULL UNIQUE,
    password_hash   VARCHAR(255) NOT NULL,

    -- Use a check constraint to mimic ENUM('super_admin','admin','student')
    role            VARCHAR(12) NOT NULL 
                    CHECK (role IN ('super_admin','admin','student')) 
                    DEFAULT 'student',

    university_id   INT,
    FOREIGN KEY (university_id)
        REFERENCES university(university_id)
        ON DELETE SET NULL
);

-- 3. RSO Table
CREATE TABLE rso (
    rso_id          SERIAL PRIMARY KEY,
    rso_name        VARCHAR(255) NOT NULL,
    description     TEXT,
    admin_user_id   INT NOT NULL,
    is_active       BOOLEAN DEFAULT FALSE,

    FOREIGN KEY (admin_user_id)
        REFERENCES "user"(user_id)
        ON DELETE CASCADE
);

-- 4. RSO Membership Table (many-to-many between user and RSO)
CREATE TABLE rso_membership (
    user_id     INT NOT NULL,
    rso_id      INT NOT NULL,
    joined_date TIMESTAMP NOT NULL DEFAULT NOW(),

    PRIMARY KEY (user_id, rso_id),

    FOREIGN KEY (user_id)
        REFERENCES "user"(user_id)
        ON DELETE CASCADE,

    FOREIGN KEY (rso_id)
        REFERENCES rso(rso_id)
        ON DELETE CASCADE
);

-- 5. Event Table (public, private, or RSO)
CREATE TABLE event (
    event_id           SERIAL PRIMARY KEY,
    event_name         VARCHAR(255) NOT NULL,

    -- Use check constraint to mimic ENUM('public','private','rso')
    event_type         VARCHAR(7) NOT NULL
                       CHECK (event_type IN ('public','private','rso')),

    event_category     VARCHAR(50) NOT NULL,   -- e.g., 'social', 'fundraising'
    event_description  TEXT,
    event_date         DATE NOT NULL,
    event_time         TIME NOT NULL,
    location_name      VARCHAR(255),
    address            VARCHAR(255),
    latitude           DECIMAL(9, 6),
    longitude          DECIMAL(9, 6),
    contact_phone      VARCHAR(20),
    contact_email      VARCHAR(255),

    rso_id             INT,
    university_id      INT,
    approved_by        INT,

    FOREIGN KEY (rso_id)
        REFERENCES rso(rso_id)
        ON DELETE SET NULL,

    FOREIGN KEY (university_id)
        REFERENCES university(university_id)
        ON DELETE SET NULL,

    FOREIGN KEY (approved_by)
        REFERENCES "user"(user_id)
        ON DELETE SET NULL
);

-- 6. Comment Table
CREATE TABLE comment (
    comment_id    SERIAL PRIMARY KEY,
    event_id      INT NOT NULL,
    user_id       INT NOT NULL,
    comment_text  TEXT NOT NULL,
    created_at    TIMESTAMP NOT NULL DEFAULT NOW(),
    updated_at    TIMESTAMP,

    FOREIGN KEY (event_id)
        REFERENCES event(event_id)
        ON DELETE CASCADE,

    FOREIGN KEY (user_id)
        REFERENCES "user"(user_id)
        ON DELETE CASCADE
);

-- 7. Rating Table (1-to-5 rating)
CREATE TABLE rating (
    rating_id     SERIAL PRIMARY KEY,
    event_id      INT NOT NULL,
    user_id       INT NOT NULL,
    rating_value  INT,

    -- Ensures the rating is between 1 and 5
    CONSTRAINT chk_rating_value 
        CHECK (rating_value BETWEEN 1 AND 5),

    FOREIGN KEY (event_id)
        REFERENCES event(event_id)
        ON DELETE CASCADE,

    FOREIGN KEY (user_id)
        REFERENCES "user"(user_id)
        ON DELETE CASCADE,

    -- A user can only rate an event once
    CONSTRAINT unique_event_user 
        UNIQUE (event_id, user_id)
);
